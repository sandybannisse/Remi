#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AkMixerInputInfo : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkMixerInputInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkMixerInputInfo obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkMixerInputInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkMixerInputInfo(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AkConnectionType eConnectionType { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eConnectionType_set(swigCPtr, (int)value); }  get { return (AkConnectionType)AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eConnectionType_get(swigCPtr); } 
  }

  public float fCenterPerc { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_fCenterPerc_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_fCenterPerc_get(swigCPtr); } 
  }

  public AkSpeakerPanningType eSpeakerPanningType { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eSpeakerPanningType_set(swigCPtr, (int)value); }  get { return (AkSpeakerPanningType)AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eSpeakerPanningType_get(swigCPtr); } 
  }

  public Ak3DSpatializationMode eSpatializationMode { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eSpatializationMode_set(swigCPtr, (int)value); }  get { return (Ak3DSpatializationMode)AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_eSpatializationMode_get(swigCPtr); } 
  }

  public Ak3DPositionType e3DPositionType { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_e3DPositionType_set(swigCPtr, (int)value); }  get { return (Ak3DPositionType)AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_e3DPositionType_get(swigCPtr); } 
  }

  public bool bHasListenerRelativeRouting { set { AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_bHasListenerRelativeRouting_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMixerInputInfo_bHasListenerRelativeRouting_get(swigCPtr); } 
  }

  public AkMixerInputInfo() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkMixerInputInfo(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.